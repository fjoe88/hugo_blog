<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Zhou Fang 方舟</title>
    <link>/categories/r/</link>
    <description>Recent content in R on Zhou Fang 方舟</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 20 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[R] How to write a custom lapply function that can access list names, using closures and function factories</title>
      <link>/post/r-how-to-write-a-custom-lapply-function-that-remember-list-names-using-closures-and-function-factories/</link>
      <pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/r-how-to-write-a-custom-lapply-function-that-remember-list-names-using-closures-and-function-factories/</guid>
      <description>One of my favorite as well as most used base function in R is lapply, where it allows one to apply a function over a List or a Vector, and return a list of the same length.
Here is an example:
num &amp;lt;- list(0, 1, 2, 3)add_one &amp;lt;- function(x) x+1#returns a new list same length as num but with each number element increased by onenum_add_one &amp;lt;- lapply(num, add_one)Another variant of the apply family - sapply, works similarly to lapply except that the returned result will be simplified, using previous example</description>
    </item>
    
  </channel>
</rss>